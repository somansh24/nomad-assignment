name: Deploy Nomad Infra

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action to run (apply or destroy)"
        required: true
        default: "apply"
      confirm:
        description: "Type YES to confirm destroy"
        required: false
        default: "NO"

permissions:
  contents: write   # allow the workflow to push state back to repo

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      # Cache only plugins, NOT state
      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: .terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.9.0'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: github.event.inputs.action == 'apply' || github.event_name == 'push'
        run: terraform plan -out=tfplan
        env:
          TF_VAR_nomad_pubkey: ${{ secrets.NOMAD_KEY_PUB }}

      - name: Terraform Apply (manual trigger)
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_nomad_pubkey: ${{ secrets.NOMAD_KEY_PUB }}

      - name: Terraform Apply (default push to main)
        if: github.event_name == 'push'
        run: terraform apply -input=false -auto-approve tfplan
        env:
          TF_VAR_nomad_pubkey: ${{ secrets.NOMAD_KEY_PUB }}

      # Persist state after APPLY so future DESTROY sees real resources
      - name: Commit & push state after apply
        if: github.event.inputs.action == 'apply' || github.event_name == 'push'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add terraform.tfstate terraform.tfstate.backup .terraform.lock.hcl || true
          git commit -m "Update Terraform state [skip ci]" || echo "No changes"
          git push

      - name: Terraform Destroy (with safeguard)
        if: github.event.inputs.action == 'destroy'
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "YES" ]; then
            echo "‚ùå Destroy not confirmed. Set confirm=YES to proceed."
            exit 1
          fi
          terraform destroy -auto-approve
        env:
          TF_VAR_nomad_pubkey: ${{ secrets.NOMAD_KEY_PUB }}

      # Persist state after DESTROY so repo reflects empty state
      - name: Commit & push state after destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add terraform.tfstate terraform.tfstate.backup .terraform.lock.hcl || true
          git commit -m "Update Terraform state (post-destroy) [skip ci]" || echo "No changes"
          git push
